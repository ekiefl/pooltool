name: format

on:
  pull_request:
    branches: [main]

jobs:
  lint-and-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.8.3"
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install project dependencies
        run: poetry install

      # --- Ruff linting and formatting
      - name: Run linting check
        id: ruff_lint
        continue-on-error: true
        run: |
          poetry run ruff --version
          poetry run make lint-check
          echo "ruff_lint_failed=$?" >> $GITHUB_ENV

      - name: Check formatting
        id: ruff_format
        continue-on-error: true
        run: |
          poetry run ruff --version
          poetry run make format-check
          echo "ruff_format_failed=$?" >> $GITHUB_ENV

      # --- Type checking
      - name: Run type checking
        id: typecheck
        continue-on-error: true
        run: |
          poetry run pyright --version
          poetry run make typecheck
          echo "typecheck_failed=$?" >> $GITHUB_ENV

      # --- Display results
      - name: Results
        if: always()
        run: |
          # Print out test results
          passed=()
          failed=()

          if [[ "${{ env.ruff_lint_failed }}" != "0" ]]; then
            failed+=("ruff_lint")
          else
            passed+=("ruff_lint")
          fi

          if [[ "${{ env.ruff_format_failed }}" != "0" ]]; then
            failed+=("ruff_format")
          else
            passed+=("ruff_format")
          fi

          if [[ "${{ env.typecheck_failed }}" != "0" ]]; then
            failed+=("typecheck")
          else
            passed+=("typecheck")
          fi

          if [ ${#passed[@]} -ne 0 ]; then
            echo "✅ PASSED:"
            for check in "${passed[@]}"; do
              echo "    - $check"
            done
          fi

          echo ""

          if [ ${#failed[@]} -ne 0 ]; then
            echo "❌ FAILED:"
            for check in "${failed[@]}"; do
              echo "    - $check"
            done
          else
            echo "🚀🚀 ALL FORMATTING & TYPE-CHECKING PASSED 🚀🚀"
          fi

          echo ""
          echo "Click above jobs for details on each success/failure"

          if [ ${#failed[@]} -ne 0 ]; then
            exit 1
          fi
